Conditional Probability

	1. Evaluate P(X∪Y), if 3P(X) = P(Y) = 2/5 and P(X/Y) = 4/5.

	Given: 3P(X) = 2/5
	P(X) = 2/15 and P(Y) = 2/5
	
	Using Formula, P(X∩Y) = P(X / Y) × P(Y)
	
	⇒ P(X∩Y) = 4/5 × 2/5 
	⇒ P(X∩Y) = 8/25
	Now, P(X∪Y) = P(X) + P(Y) – P(X∩Y)
	⇒ P(X∪Y) = 2/15 + 2/5 – 8/25
	⇒ P(X∪Y) = 16/75
	
	2. In a school there are 100 students out of which 40 are boys. It is known that out of 40, 20% of boys study in class 11. What is the probability P(A/B) where A: student chosen randomly studies in class 11 and B: the chosen student is a boy.

	n(A∩B) = 20% × 40 = 8
	n(B) = 40
	Using Formula, P(A / B) = n(A∩B) / n(B)
	⇒ P(A / B) = 8 / 40
	⇒ P(A / B) = 1/5
	
	3. A coin is tossed 2 times. Find P(Y/X) if X = at least one head and Y = no tail.
	Sample Space for 2 coin toss is:
	S = {HH, HT, TH, TT}
	X = {HH, HT, TH} and Y = {HH}
	
	Thus, P(X) = 3/4,
	P(Y) = 1/4, and
	P(X∩Y) = 1/4
	
	Thus, P(Y/X) = (1/4) / (3/4)
	⇒ P(Y/X) = 1 / 3
	
	
SQL:
	1. Employees Earning More Than Their Managers
	
	Table: Employee
	Write a solution to find the employees who earn more than their managers.
	Return the result table in any order.
	The result format is in the following example.

	Example:
	
	Input:  Employee table:
	+----+-------+--------+-----------+
	| id | name  | salary | managerId |
	+----+-------+--------+-----------+
	| 1  | Joe   | 70000  | 3         |
	| 2  | Henry | 80000  | 4         |
	| 3  | Sam   | 60000  | Null      |
	| 4  | Max   | 90000  | Null      |
	+----+-------+--------+-----------+
	Output: 
	+----------+
	| Employee |
	+----------+
	| Joe      |
	+----------+
	Explanation: Joe is the only employee who earns more than his manager.
	
	2. Write a solution to find all customers who never order anything.
	Return the result table in any order.
	
	Example: Customers table:
	+----+-------+
	| id | name  |
	+----+-------+
	| 1  | Joe   |
	| 2  | Henry |
	| 3  | Sam   |
	| 4  | Max   |
	+----+-------+
	
	Orders table:
	+----+------------+
	| id | customerId |
	+----+------------+
	| 1  | 3          |
	| 2  | 1          |
	+----+------------+

	Output:
	+-----------+
	| Customers |
	+-----------+
	| Henry     |
	| Max       |
	+-----------+

	3. Department Top Three Salaries
	A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.
	
	Write a solution to find the employees who are high earners in each of the departments.
	Return the result table in any order.
	The result format is in the following example.
	
	Example 1:
	Employee table:
	+----+-------+--------+--------------+
	| id | name  | salary | departmentId |
	+----+-------+--------+--------------+
	| 1  | Joe   | 85000  | 1            |
	| 2  | Henry | 80000  | 2            |
	| 3  | Sam   | 60000  | 2            |
	| 4  | Max   | 90000  | 1            |
	| 5  | Janet | 69000  | 1            |
	| 6  | Randy | 85000  | 1            |
	| 7  | Will  | 70000  | 1            |
	+----+-------+--------+--------------+
	Department table:
	+----+-------+
	| id | name  |
	+----+-------+
	| 1  | IT    |
	| 2  | Sales |
	+----+-------+
	Output: 
	+------------+----------+--------+
	| Department | Employee | Salary |
	+------------+----------+--------+
	| IT         | Max      | 90000  |
	| IT         | Joe      | 85000  |
	| IT         | Randy    | 85000  |
	| IT         | Will     | 70000  |
	| Sales      | Henry    | 80000  |
	| Sales      | Sam      | 60000  |
	+------------+----------+--------+
	Explanation: 
	In the IT department:
	- Max earns the highest unique salary
	- Both Randy and Joe earn the second-highest unique salary
	- Will earns the third-highest unique salary
	
	In the Sales department:
	- Henry earns the highest salary
	- Sam earns the second-highest salary
	- There is no third-highest salary as there are only two employees
	
Python:

	1. For a given dataframe with column "Tokens", Create a column: "Text", which concatenates all the tokens and remove tokens with word length <= 2. The operation needs to be performed on all the rows in the dataframe.
	
	E.g. 
	Tokens
	['I','am','learning','python']
	['I','am','learning','go']
	['I','am','learning','c++']
	
	Answer:
	df['Text'] = df['Tokens'].apply(lambda x: ' '.join([str(word) for word in x if len(word) >= 2]))

	2. Define Energy class for energy consumption in a dataframe: 
	Consider  energy consumption column name =  'consumption_energy' and Energy_class as "low", "medium", "high"
	if consumption_energy > 400 then Energy_class is high
	if 200 < consumption_energy <= 400 then Energy_class is medium
	if consumption_energy <= 400 then Energy_class is low
	

	DataFrame:
	Consumption_energy	Energy_class
	100	low
	200	low
	300	medium
	400	medium
	500	high
	
	
	Answer:
	col = 'consumption_energy'
	conditions = [df2[col] > 400, 
			(df2[col] <= 400) & (df2[col]> 200), 
			df2[col] <= 200]
	choices     = [ "high", 'medium', 'low']
	df2["energy_class"] = np.select(conditions, choices, default=np.nan)
	
	3. Bubble Sort for a list in Python:
	list1 = [5, 3, 8, 6, 7, 2]  
	print("The unsorted list is: ", list1)  
	print("The sorted list is: ", bubble_sort(list1))
	
	Output:  
	The unsorted list is:  [5, 3, 8, 6, 7, 2]
	The sorted list is:  [2, 3, 5, 6, 7, 8]
	
	Answer:
	def bubble_sort(list1):   
	    for i in range(0,len(list1)-1):  
	        for j in range(len(list1)-1):  
	            if(list1[j]>list1[j+1]):  
	                temp = list1[j]  
	                list1[j] = list1[j+1]  
	                list1[j+1] = temp  
	    return list1  
	
	
